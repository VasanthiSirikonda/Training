
************************************************************ REACTJS ***********************************************************************************

- Softwares
	- Google chrome
	- Nodejs
	- vs code
	
- Technical Concepts
	- Es6 or typescript---------reactjs
	- Promise
	- String API
	- Arrays
	- json.stringfy
	- Strict mode----------reactjs
	- Babel
	- Collections
		- list,map,set
		- Bag --> not part of java
	- optimistic and pessimistic locking
	- Virtual DOM----------reactjs
	- DOM
	- Modules----------reactjs

- For testing
	- Protractor
	
- React native 
	- it is framework
	- Used for mobile development
	- Internally uses "React"
	
- For installation of Nodejs
	- copy and paste the below link in chrome
		- https://nodejs.org/download/release/latest-v16.x/node-v16.20.2-win-x64.zip
			- latest v 21 but we use 16---> due to security polies of infinite
			- https://nodejs.org/download/release/v15.14.0/ ===>versions of Nodejs
			- For Node=15.14.0v, npm=7.7.0v
	- npm install -g eslint
	- npm install -g typescript
	- npm install -g babel
	- node -v
		- v16.20.2
	- npm -v
		- 8.19.4
	- npm uninstall babel ----> for uninstall command
	- npm install –g create-react-app 
		
- when we install any library  through cmd
	- then it is called as "node modules"

- How add env variables to env
	- Open env user edit
	- click on path
	- new
	- add the path of the nodejs
	- ok

- For creating a project
	- C:\Users\vasanthis>d:
	- D:\>mkdir reacthelloworld
	- D:\>cd reacthelloworld
	- D:\reacthelloworld>npx create-react-app hello-world-example
	- cls
	- cd hello-world-example1
	- npm start
	
- How to load our project into VSCode
	- file menu-->open folder
		-->select the project you created--->open

- How to run the project through cmd
	- Open cmd
	- cd hello-world-example1
	- npm start --- for dev env
		- npm run build --- for production env
	- If the browser doesnt open automatically
		- Open manually http://localhost:3000/
	- 3000 is the default port used in the React application.
	
Strict Mode:
------------
- https://www.typescriptlang.org/play?#code/EQVwzgpgBGAuBOBLAxrYAoAbgQ3lbUAvAJwAMA3EA
- "use strict" -- this instruction to be added
- JS doent throw compilation errors
	- JS throws silent errors
- To avoid these silent errors
	- we need to enable Strict Mode
	- By using Strict Mode, code will be tested line by line
	- Strict Mode will not allow you to compile the code
- Strict Mode is part of JavaScript

Modules:
---------
- It is a collection of classes and functions
- It is like a package in java
- import 
	- if we want to use a particular package in code
- export
	- making the modules to be public to be accessed by others
- It is a part of Es6

Virtual DOM:
-------------
- Provided by React
- By default every browser will have DOM/tree Structure
- Browser DOM
	- It helps you to create DOM structure for webpages
	- If we want to modify the webpage at any time or 	
		at runtime on any node, It is very easy with DOM
	- Live DOM Viewer(https://software.hixie.ch/utilities/js/live-dom-viewer/)
		- Code to tree
	- Alternative approach to Live DOM Viewer
		- https://chrome.google.com/webstore/detail/dom-node-tree-viewer/jbplakkefflidgnjhckoahendgekokfc
		- Add this pluggin to google 
			- close the browser and reopen the browser
				- search for the website you want know its tree structure
					- Open the puzzle button 
						- Dom tree viewer
- Rendering:
	- Adding something to the existing one --> Rendering
	- Updating changes or making changes to Webpage is called as RENDERING.
- 3 Types of DOM
	- DOM 
		- It is time consuming and requires more memory
		- Slower
		- Browser side DOM
		- more CPU utilization
		- Uses Observable Design Pattern
			- Observable Function
				- He is like watchman in real life
				- It will send the info to virtual DOM
	- Virtual DOM
		- Light weight version of DOM
		- ReactJS uses Virtual DOM
		- Faster
		- It has Rendering feature
		- less CPU utilization
	
	- Shadow DOM

- In React, react is powered with LiveReload Server
- LiveReload will take the responsibility 
	for the changes that are made to code,and to reflect it on browser automatically

Webpack:
--------
- https://webpack.js.org/
- Responsible to pack/bundle our project
- It is a tool


- Local host is not allowed in projects
	- Instead we need to use IPV4
		- Goto cmd--> ipconfig--> my IPV4: 10.4.33.56

- How to add dependency 
	- By using package.json
		- goto package.json 
		- add the package to the package.json manually
		- Update the project by opening the cmd from the project location
			- Issue command "npm update"
	- Through cmd
		- we have repository for npm
			- https://www.npmjs.com/
			- search for the dependency to be added
			
- .gitignore
	- Config file of git
	- .gitignore file is used to ignore 
		the files that have not to be pushed

- In java, dependencies are will be in jar format
	- In React, dependencies are will be in modules format

- If u want to send proj to others
	- send by removing node_modules
	- if you want to add it back
		- issue command "npm update"

- In java, 3rd party dependencies will be in jar format
	- In JS/Frontend, when we want to use 3rd party libraries,
		then we need to include that library in the code using "script tag".
		- <script src="path of 3rd party libraries"/>
		- Libraries will be in ".js" format
	- In JS, to include any 3rd party lib, we can use 2 typescript
		- Minimized version (Eg: popper.min.js)
			- Occupies less memory
		- Normal version (Eg: popper.js)
			- Occupies more memory

- robots.txt
	- makes your app available or searchable for
		search engines, if your app is on cloud
	- Every Search Engines searches for robots.txt

- svg(scalable vector graphics)
	- Fileformat-->Meant for displaying the image
	- In svg, our files will be stored in xml format but not in binary format
	- Used in graphics-- 2d,3d images
		
-https://create-react-app.dev/docs/using-the-public-folder/	


How to run Production env:
---------------------------		
- To use react development tools, we need to add/install development tools addons to browser
- Once added, we need to restart the browser,
	compile your react code in production mode using below command
	- npm run build
		- If it fails, then we need to install serve for testing purpose
			- npm install -g serve
		- To start the server
			- serve -s build
Note: In production mode always make sure you are building project whenever you are making changes
	otherwise, changes will not reflected on your browser

Production ENV:
----------------
- needs real server
- we can also use a dummy server=="serve"

React:
---------
- Component
	- Props
	- State
	- Lifecycle
- Rendering
- Form
- API handling
- Parent-Child Communication and vice-versa is challenging
- Promise/Fetch API

- React 2 types
	- React--- web development
	- ReactNative---mobile development

- Instead of React
	- Flask
		- suitable for small applications
		- Doesnt support enterprise application
	- Django
	- Angular
	- Vue

- Instead of ReactNative
	- Phonegap
	- Temenos/kony
	- Sencha
- Using React we can create customized tags in html

Component:
-----------
- Component can be created in 2 ways
	- Using Functional approach
		- function abc()
			{
				//body
			}
	- Using Class approach
		- class abc extends React.Component
			{
				//body
			}
- We can pass the data from one component to another component by using "property"
- Every component will have "State" and "property"
- State--->to store/save component data temporarly
- Component are splitted into 2 types
	- Uncontrolled
	- Controlled
- Component Lifecycle
- React 3rd party components
	- calender,crasol,hamberger..etc
- Every component name's first letter is capital
	
React Icons:
------------
- https://react-icons.github.io/react-icons/
- https://react-icons.github.io/react-icons/icons?name=bi
- to install react icons 
	- npm install react-icons --save
	
How to disable the JS in chrome:
----------------------------------
- open chrome-->settings--->site settings-->js-->disable JS


- ReactDOM(https://react.dev/reference/react-dom)
	- createRoot(domNode, options?)
	- root.render(reactNode)
	- root.unmount()
	

- Conventions of Using State in React: 
	- The state of a component should prevail throughout its lifetime, 
	thus we must first have some initial state, to do so we should define
	the State in the constructor of the component’s class.The state should 
	never be updated explicitly. React uses an observable object as the state
	that observes what changes are made to the state and helps the component
	behave accordingly.React provides its own method setState(). setState() method
	takes a single parameter and expects an object which should contain the set of
	values to be updated. Once the update is done the method implicitly calls the 
	render() method to repaint the page. Hence, the correct method of updating the
	value of a state will be similar to the code below. State updates should
	be independent. The state object of a component may contain multiple attributes 
	and React allows to use setState() function to update only a subset of those attributes 
	as well as using multiple setState() methods to update each attribute value 
	independently.The only time we are allowed to define the state explicitly is in the constructor to provide the initial state.

- State is not applicable for the components that we create using functions.
	- State works only for components that we create using class.\
	- But from latest react, i.e., from 16version onwards even for functional approach we can achieve state using "hooks" concept.
- To change state values dynamically, we need to use below method	
	- setState()
- whenever render() method is called , the DOM appends the child to the root 

REACT ROUTING:
--------------
- Used to navigate from one page/component to other page/component
- Add dependencies of routing
- create components
- In App.js	
	- specify routes
	- 	<routes>
			<route>
			</route>
		</routes>
		- we will give path of the component in route tags
	- create functions for the respective components 
		- Include return statements
	- In Navbar.js
		- Add the css given below in the return statements
	- In other components add div tags in order to avoid the errors 
	- In Index.js
		- In <React.StrictMode> tag add the <BrowserRouter> tag 
			- Keep the <App /> tag which is already present in the code in b/w <browserRoute></browserRoute>
   - In Contact.js
		- Add the css given by trainer in return statements

		
REACT ROUTING APPLICATION STEPS:
-------------------------
- Create the folder	
	- npx create-react-app reactroutingexample
- cd reactroutingexample
- download the dependencies for the react routing 
	- npm install react-router-dom --save
- download bootstrap dependeny for auto alignment in any device like mobile,laptop,desktop
	- npm install bootstrap --save
- Open VScode
	- open the react application
	- create a "component" folder under src
		- create files under component
			- Home,Contact,Team,About,Navbar,Services,Blog,
	- Open index.js
		- Add the below tag
			- <script src="https://cdn.tailwindcss.com"></script>
			- Used for the development of rich internet web applications
			- https://tailwindcss.com/
			- Similarly like CSS
				- We cant apply any conditions in CSS
				- by using one framework we can use conditions in CSS
			- It is a 3rd party library

REACTTODO APPLication:
---------------------
- Create a project with name "reacttodo"
- Push it into VSCode
- Create Component folder
	- create 2 files with name "ToDoList" and "ToDoItem"
	- ToDoList
		- The names we enter in textbox
	- ToDoItem
		- The textbox and button


- ComponentDidUpdate is a React component lifecycle method 
	invoked immediately after a component's updates are
	flushed to the DOM.
	
- Component Lifecycle Phases:
------------------------------
	- Initialization
		- state and property were present
		- occurs only once
	- Mounting
		- making it available/loading into memory
		- render() and componentDidMount()
	- Updation
		- ComponentDidUpdate()
	- Unmounting
		- ComponentWillUnmount()
		- occurs only once
		
React Ref:
----------
- <input type="text" name="uname"/>
	- if it uses normal DOM
		- document.getElementByName() is enough
- But React uses virtual DOM 
	- react.createRef()



NOTE:
-----
- We dont have access specifiers in JS.
- vaue js
- Yarn
	- https://yarnpkg.com/
	- alternative to npm
	- It is a package manager for our code
	- It allows you to use and share (e.g. JavaScript) 
		code with other developers from around the world.
	- Yarn does this quickly, securely, and reliably 
		so you don't ever have to worry.
- If the browser structs, the reason may be
	- Processor issue or memory issue
- package.json is similar like pom.xml in maven
- we have repository for npm
	- https://www.npmjs.com/
- npm update
	- to update the change that we done on project
- Git Push
	- git init
	- git add *
	- git commit -m ""
- Image formats
	- png, jpg, jpeg, svg(scalable vector graphics)
	- We can also store images in base64 format
		- It will be in encrypted format
		- browsers can recognize base64
- Reconsilation
	- Reconciliation is a process to compare and keep in sync the two files (Real and 
		Virtual DOM).
	- Diffing algorithm is a technique of reconciliation which is used by 
		React.
- JSX(JavaScript XML)
	- https://legacy.reactjs.org/docs/introducing-jsx.html
	- Way of simplifying the code
		- syntax: { //body }
- ToolTip
	- When you place a cursor on an icon, it is called ToolTip
- Badge
	- The no. of messages appaer on app in mobile
- For entire react app
	- "root" is the parent
- Using react DOM API 
	- the developers can add the childs to parent
- https://react.dev/learn
- <noscript> tag is enabled, when JS is disabled in your browser.
- ENOENT--- common issue in Nodejs.
- CDN-- cloud server used in amazon and flipkart for storing images.
- JSF(Java Server Faces)
	- Compitetor for JSP
	- language used in Sever side technology
	
- Axios
	- https://www.npmjs.com/package/axios
- Fetch API
	- Used in React,Angular, Salesforce
	- We cant fetch the data from backend using pure JS
		- By using 3rd party libraries like Fetch API or Axiom
	- Axiom 
		- Async
		- Promise
			- Every promise have Call back
				- Success
				- Failure
		- Http methods
- Superagent
- React-axios
- Use-http
- React-request
- CoRs
	- Used to build the communication b/w 2 domains
		- b/w frontend and db		
	
		
SPRINGBOOT+REACT JS:
--------------------
- create project with name "reactboot"
- cd reactboot
- npm install axios
- npm start

- By using "useState()" and "useEffect()" we can achieve "state" in functional approach
- useState is a React Hook that lets you add a state variable to your component.



React js+Springboot
===================
react cannot directly interact with spring boot,it takes the help of axios
1)Downloaded the bootreact from github
2)in d drive unzip the folder and import it to sts
3)run and check in postman(using get method) 
@CrossOrigin("http://localhost:3000/")--in controller, if 2 applications want to communicate with eachother we use
>D:\reacthelloworld>npx create-react-app reactboot
D:\reacthelloworld>cd reactboot
D:\reacthelloworld\reactboot>npm install axios
D:\reacthelloworld\reactboot>npm start
*useState()--we achive state for the functional approach


*hooks
======
Hooks are a new addition in React 16.8. They let you use state and other React features without writing a class.
the functional way of creating component in state ---hooks
useEffect--helps in applying state in function approach
>Below 3 are axios method
EmployeeService.getEmployees().then((response) => {
            setEmployees(response.data)
            console.log(response.data);
then((response)--is the axios way of interacting with server
>const [employees, setEmployees] = useState([])
useState([])--pull the data and push to employees and then setters
*useState is a React Hook that lets you add a state variable to your component.
const EMPLOYEE_API_BASE_URL = 'http://localhost:8080/api/employees';--in service we give this


TASK:
----
- https://jsonplaceholder.typicode.com/db
- https://cat-fact.herokuapp.com/facts/



FormValidations:
----------------
- create react project
- create component with name 

Carousel:
----------
- https://react-bootstrap.netlify.app/docs/components/carousel/
- Used for the scrolling 
- It can avoid the unecessary coding in react -- as it uses "ReactBootStrap"






if (fields["emailid"]) {
            var pattern = new RegExp(/^(("[\w-\s]+")|([\w-]+(?:\.[\w-]+)*)|("[\w-\s]+")([\w-]+(?:\.[\w-]+)*))(@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/i);
            if(!pattern.test(fields["emailid"]))
            {
                fvalid = false;
                errors["emailid"] = "*Please enter valid email-ID.";
            }
        }
		